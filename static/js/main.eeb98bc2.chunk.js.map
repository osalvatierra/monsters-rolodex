{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","monster","id","name","email","react_default","a","createElement","className","alt","concat","src","CardList","monsters","map","card_component","key","SearchBox","placeholder","onChangeHandler","type","onChange","App","_useState","useState","_useState2","Object","slicedToArray","searchField","setSearchField","_useState3","_useState4","title","setTitle","_useState5","_useState6","setMonsters","_useState7","_useState8","filteredMonsters","setFilterMonsters","useEffect","fetch","then","response","json","users","newFilteredMonsters","filter","toLocaleLowerCase","includes","search_box_component","event","searchFieldString","target","value","card_list_component","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","container","document","getElementById","createRoot","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.eeb98bc2.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nconst Card = ({ monster }) => {\n  const { id, name, email } = monster;\n\n  return (\n    <div className='card-container'>\n      <img\n        alt={`monster ${name}`}\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\n      />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default Card;","import React from 'react';\nimport Card from '../card/card.component';\n\nimport './card-list.styles.css';\n\nconst CardList = ({ monsters }) => (\n  <div className='card-list'>\n    {monsters.map((monster) => {\n      return <Card key={monster.id} monster={monster} />;\n    })}\n  </div>\n);\n\nexport default CardList;","import React from 'react';\nimport './search-box.styles.css';\n\nconst SearchBox = ({ className, placeholder, onChangeHandler }) => (\n\t<input\n\t\tclassName={`search-box ${className}`}\n\t\ttype='search'\n\t\tplaceholder={placeholder}\n\t\tonChange={onChangeHandler}\n\t/>\n  );\n\nexport default SearchBox;","import React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [searchField, setSearchField] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [monsters, setMonsters] = useState([]);\n  const [filteredMonsters, setFilterMonsters] = useState(monsters);\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => setMonsters(users));\n  }, []);\n\n  useEffect(() => {\n    const newFilteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n\n    setFilterMonsters(newFilteredMonsters);\n  }, [monsters, searchField]);\n\n  const onSearchChange = (event) => {\n    const searchFieldString = event.target.value.toLocaleLowerCase();\n    setSearchField(searchFieldString);\n  };\n\n  const onTitleChange = (event) => {\n    const searchFieldString = event.target.value.toLocaleLowerCase();\n    setTitle(searchFieldString);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"app-title\">{title}</h1>\n\n      <SearchBox\n        className=\"monsters-search-box\"\n        onChangeHandler={onSearchChange}\n        placeholder=\"search monsters\"\n      />\n      <br />\n      <SearchBox\n        className=\"title-search-box\"\n        onChangeHandler={onTitleChange}\n        placeholder=\"set title\"\n      />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}